import sys
import signal
from pathlib import Path
import os

# 从SDK包中导入所需模块
from dp.agent.cloud.mcp import mcp
from dp.agent.cloud.mqtt import get_mqtt_cloud_instance
from dp.agent.lab.mqtt_device_twin import DeviceTwin
# 从本地导入 TescanDevice
from lab.tescan_device import TescanDevice

def run_cloud():
    """Run in cloud environment"""
    mqtt_instance = get_mqtt_cloud_instance()
    
    def signal_handler(sig, frame):
        """Handle SIGINT signal to gracefully shutdown."""
        print("Shutting down...")
        mqtt_instance.stop()
        sys.exit(0)
    
    # Register signal handler for graceful shutdown
    signal.signal(signal.SIGINT, signal_handler)
    
    # Start MCP server
    print("Starting MCP server...")
    mcp.run(transport="sse")

def run_lab():
    """Run in lab environment"""
    # Initialize device and twin
    tescan_device = TescanDevice()
    device_twin = DeviceTwin(tescan_device)
    
    # Run device twin
    try:
        device_twin.run()
    except KeyboardInterrupt:
        print("\nShutting down lab environment...")
        sys.exit(0)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python main.py [lab|cloud]")
        sys.exit(1)
        
    mode = sys.argv[1]
    if mode == "lab":
        run_lab()
    elif mode == "cloud":
        run_cloud()
    else:
        print(f"Unknown mode: {mode}")
        print("Usage: python main.py [lab|cloud]")
        sys.exit(1) 